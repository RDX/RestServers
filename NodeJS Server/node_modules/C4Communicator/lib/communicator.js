var net = require('net'),
    xml2js = require('xml2js'),
    util = require('util');
	
/*
<c4soap name="SendToDeviceAsync" async="True"><param type="number" name="iddevice">226</param><param type="string" name="data"><devicecommand><command>CLICK_TOGGLE_BUTTON</command><params></params></devicecommand></param></c4soap>

<c4soap name="GetItems" async="False" seq="5"><param name="filter" type="number">27</param></c4soap>
<c4soap name="GetNetworkBindings" async="False" seq="3"></c4soap>
*/

exports.version = '0.0.1';

var client;
var xmlData;
var sequence;
var initialized = false;

var project = {};
var callQueue = {};

exports.createClient = createClient = function(ip){
  if(ip != ""){
    xmlData = '<?xml version="1.0" encoding="utf-8"?>\n';
    sequence = 0;

    client = net.createConnection(5020,ip,function() {
      //getItems(27);
      //getNetworkBindings();
    });
    client.on('connect', onConnect);
    client.on('data', onData);
    client.on('end', onEnd);
    client.on('timeout', onTimeout);
    client.on('drain', onDrain);
    client.on('error', onError);
    client.on('close', onClose);
  }
};

getItems = function(callback){
  if(!initialized){
    sendRequest("GetItems",false,callback,'<param name="filter" type="number">27</param>');
  }else{
    callback();
  }
};

exports.getVersion = function(callback){
  sendRequest("GetVersionInfo",false,callback);
};

exports.getLights = function(callback){
  getItems(function(){
    callback(project.lights);
  });
};

sendRequest = function(name,async,callback,optionalData){
  callQueue[sequence] = callback;

  var command;
  if (typeof optionalData === 'undefined') {
    command = '<c4soap name="'+ name +'" async="'+ async +'" seq="'+ sequence +'"/>\0';
  }else{
    command = '<c4soap name="'+ name +'" async="'+ async +'" seq="'+ sequence +'">'+optionalData+'</c4soap>\0';
  }

  client.write(command);
}

processResponse = function(){

  var parser = new xml2js.Parser();
  var json;

  parser.on('end', function(result) {
    if(result['@'].name == 'GetItems'){
      initialized = true;
      
      project.name = result.systemitems.item.subitems.item[6].subitems.item.name;
      project.levels = result.systemitems.item.subitems.item[6].subitems.item.subitems.item;;

      console.log(project.levels);

      if(!util.isArray(project.levels)){
        project.levels = [ project.levels ];
      }

      for (var l = 0; l < project.levels.length; l++)
      {

        if(project.levels[l].subitems != null){
          var rooms = project.levels[l].subitems.item;
          console.log("rooms: " + rooms);
          for (var r = 0; r < rooms.length; r++)
          {
            var devices = rooms[r].subitems.item;
            console.log("devices: " + devices);
            for (var d = 0; d < devices.length; d++)
            {
              project.lights = project.lights.concat( devices );
            }
          }
        }
        
      }
      
    }

    var callback = callQueue[result['@'].seq];
    if(callback === 'undefined'){
      console.log("Error processing callback on processResponse()");
    }else{
      delete callQueue[result['@'].seq];
      callback(xmlData);
    }

    xmlData = '<?xml version="1.0" encoding="utf-8"?>\n';
    sequence++;
  });

  parser.parseString(xmlData);

};

onConnect = function(){
  console.log("Connected to Director at " + client.remoteAddress);
};

onData = function(data){

  if(data[data.length - 1] == 0){
    var buffer = data.slice(0, data.length - 1);
    xmlData += buffer;
    processResponse();
  }else{
    xmlData += data.toString();
  }

};

onEnd = function(){
  console.log("On End");
};

onTimeout = function(){
  console.log("On Timeout");
};

onDrain = function(){
  console.log("On Drain");
};

onError = function(exception){
  console.log("Director Connection Error");
};

onClose = function(had_error){
  console.log("Closing Connection to Director");
};
